name: CI/CD
on: push
jobs:
  dependencies:
    name: üèó Installing dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js with Yarn
        id: setup-nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies
        if: steps.setup-nodejs.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

  linting:
    name: üßπ Linting
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies from cache
        run: yarn --offline --frozen-lockfile --ignore-optional --ignore-scripts

      - name: Run linting
        run: yarn lint

  unit-testing:
    name: üß™ Unit testing
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies from cache
        run: yarn --offline --frozen-lockfile --ignore-optional --ignore-scripts

      - name: Run unit tests
        run: yarn test:unit

  end-to-end-testing:
    name: üñ• End to end testing
    runs-on: ubuntu-latest
    needs: dependencies
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies from cache
        run: yarn --offline --frozen-lockfile

      - name: Pull production environment information
        run: yarn deploy:env --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project
        run: yarn deploy:build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Run end to end tests
        uses: cypress-io/github-action@v4
        with:
          install: false
          start: yarn start -p 3001
          wait-on: http://localhost:3001/
          command: yarn test:e2e

      - name: Upload screenshots
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload videos
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

      - name: Upload built project
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: project
          path: .next

      - name: Upload build output
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .vercel/output

  deployment:
    name: üöÄ Deployment
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    if: github.ref == 'refs/heads/main'
    concurrency: deployment
    environment:
      name: Production
      url: https://wentingwang.co.uk
    needs: [linting, unit-testing, end-to-end-testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: yarn global add vercel

      - name: Download built project
        uses: actions/download-artifact@v3
        with:
          name: project
          path: .next

      - name: Download build output
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .vercel/output

      - name: Deploy built project to production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
