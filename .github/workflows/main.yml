name: CI/CD
on: push
jobs:
  dependencies:
    name: üèó Installing dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs
        id: setup-nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies
        if: steps.setup-nodejs.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

  linting:
    name: üßπ Linting
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies from cache
        run: yarn --offline --frozen-lockfile --ignore-optional --ignore-scripts

      - name: Run linting
        run: yarn lint

  unit-testing:
    name: üß™ Unit testing
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies from cache
        run: yarn --offline --frozen-lockfile --ignore-optional --ignore-scripts

      - name: Run unit tests
        run: yarn test

  end-to-end-testing:
    name: üñ• End to end testing
    runs-on: ubuntu-latest
    needs: dependencies
    env:
      NEXT_PUBLIC_FLAGS_ENVIRONMENT_KEY: ${{secrets.FLAGS_DEVELOPMENT_KEY}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies from cache
        run: yarn --offline --frozen-lockfile

      - name: Restore built application from cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx') }}
          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - name: Build application
        run: yarn build

      - name: Run end to end tests
        uses: cypress-io/github-action@v2
        with:
          install: false
          start: yarn start -p 3001
          wait-on: http://localhost:3001/
          command: yarn test:e2e

      - name: Upload screenshots
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload videos
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

  deployment:
    name: üöÄ Deployment
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    if: github.ref == 'refs/heads/main'
    concurrency: deployment
    environment:
      name: Production
      url: https://wentingwang.co.uk
    needs: [linting, unit-testing, end-to-end-testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy project artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
